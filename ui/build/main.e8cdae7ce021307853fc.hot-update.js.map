{"version":3,"file":"main.e8cdae7ce021307853fc.hot-update.js","mappings":"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","sources":["/Users/sean.narenthiran/Code/lightning-collaborative/ui/src/Train.js","/Users/sean.narenthiran/Code/lightning-collaborative/ui/webpack/runtime/getFullHash"],"sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { styled } from \"@mui/material/styles\";\nimport Paper from '@mui/material/Paper';\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked';\nimport RotateRightIcon from '@mui/icons-material/RotateRight';\nimport CheckIcon from '@mui/icons-material/Check';\nimport Slider from '@mui/material/Slider';\nimport MuiTooltip, { tooltipClasses } from '@mui/material/Tooltip';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Switch from '@mui/material/Switch';\nimport TextField from '@mui/material/TextField';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\nimport { CopyBlock, dracula } from \"react-code-blocks\";\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Link from '@mui/material/Link';\n\n\nconst ColorButton = styled(Button)(({ theme }) => ({\n  color: \"#FFFFFF\",\n  backgroundColor: \"#6e58d7\",\n  '&:hover': {\n    backgroundColor: \"#614eb9\",\n  },\n}));\nconst CardContentNoPadding = styled(CardContent)(`\n  padding: 0;\n  &:last-child {\n    padding-bottom: 0;\n  }\n`);\nconst ColorLoadingButton = styled(LoadingButton)(({ theme }) => ({\n  color: \"#FFFFFF\",\n  backgroundColor: \"#6e58d7\",\n  '&:hover': {\n    backgroundColor: \"#614eb9\",\n  },\n  '&:disabled': {\n    backgroundColor: \"#614eb9\",\n  },\n}));\nconst Item = styled(Paper)(({ theme }) => ({\n  backgroundColor: 'transparent',\n  boxShadow: 'none',\n  border: 0,\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  textAlign: 'left',\n  color: theme.palette.text.secondary,\n}));\nconst LightTooltip = styled(({ className, ...props }) => (\n  <MuiTooltip {...props} classes={{ popper: className }} />\n))(({ theme }) => ({\n  [`& .${tooltipClasses.tooltip}`]: {\n    backgroundColor: 'white',\n    color: 'black',\n    boxShadow: 0,\n    fontSize: 11,\n  },\n}));\n\nfunction Options(props) {\n  var powerSGDChange = (e) => {\n    props.setPowerSGD(e.target.checked)\n  };\n  var optimizeCommunication = (e) => {\n    props.setOptimizeCommunication(e.target.checked)\n  };\n  var optimizeMemory = (e) => {\n    props.setOptimizeMemory(e.target.checked)\n  };\n  if (props.presetConfig || props.flowRunning) {\n    return (\n      <Box sx={{ width: \"100%\", display: 'flex' }}>\n        <FormGroup row={true}>\n          <FormControlLabel labelPlacement=\"start\" control={<Switch disabled={true} checked={props.optimizeCommunication} size=\"small\" sx={{ color: \"#6e58d7\" }} />} label={<Typography sx={{ fontSize: 14 }}>Optimize Communication</Typography>} />\n          <FormControlLabel labelPlacement=\"start\" control={<Switch disabled={true} checked={props.optimizeMemory} size=\"small\" sx={{ color: \"#6e58d7\" }} />} label={<Typography sx={{ fontSize: 14 }}>Optimize GPU Memory</Typography>} />\n          <FormControlLabel labelPlacement=\"start\" control={<Switch disabled={true} checked={props.powerSGD} size=\"small\" sx={{ color: \"#6e58d7\" }} />} label={<Typography sx={{ fontSize: 14 }}>PowerSGD</Typography>} />\n        </FormGroup>\n      </Box>\n    );\n  }\n  return (\n    <Box sx={{ width: \"100%\", display: 'flex', mb: 2, mt: 1 }}>\n      <FormGroup row={true}>\n        <FormControlLabel labelPlacement=\"start\" control={<Switch onChange={optimizeCommunication} size=\"small\" sx={{ color: \"#6e58d7\" }} />} label={<Typography sx={{ fontSize: 14 }}>Optimize Communication</Typography>} />\n        <FormControlLabel labelPlacement=\"start\" control={<Switch onChange={optimizeMemory} size=\"small\" sx={{ color: \"#6e58d7\" }} />} label={<Typography sx={{ fontSize: 14 }}>Optimize GPU Memory</Typography>} />\n        <FormControlLabel labelPlacement=\"start\" control={<Switch onChange={powerSGDChange} size=\"small\" sx={{ color: \"#6e58d7\" }} />} label={<Typography sx={{ fontSize: 14 }}>PowerSGD</Typography>} />\n      </FormGroup>\n    </Box>\n  );\n}\nfunction DiscreteBatchSizeSlider(props) {\n  var handleChange = (index, value) => {\n    props.setBatchSize(value)\n  };\n  return (\n    <Box sx={{ width: \"80%\", ml: 1, mb: 2 }}>\n      <Slider\n        size=\"small\"\n        aria-label=\"Batch Size\"\n        defaultValue={16384}\n        valueLabelDisplay=\"auto\"\n        step={512}\n        marks={[{ label: '4096', value: 4096 }, { label: '16384', value: 16384 }, { label: '32768', value: 32768 }]}\n        min={0}\n        max={32768}\n        onChange={handleChange}\n        sx={{ color: \"#FFFFFF\" }}\n        disabled={props.presetConfig || props.flowRunning}\n      />\n    </Box>\n  );\n}\nfunction DeviceSlider(props) {\n  var handleChange = (index, value) => {\n    props.setDeviceState(value)\n  };\n  let devices = [];\n  [...Array(props.devices).keys()].forEach(k => {\n    devices.push({ label: (k + 1), value: (k + 1) });\n  });\n  return (\n    <Box sx={{ width: \"80%\", ml: 1, mb: 2 }}>\n      <Slider\n        size=\"small\"\n        aria-label=\"Devices\"\n        defaultValue={1}\n        valueLabelDisplay=\"auto\"\n        marks={devices}\n        min={0}\n        step={null}\n        max={props.devices}\n        onChange={handleChange}\n        sx={{ color: \"#FFFFFF\" }}\n        disabled={props.flowRunning}\n      />\n    </Box>\n  );\n}\n\nfunction CheckButton(checksFailed, flowRunning, complete) {\n  if (flowRunning || checksFailed) {\n    if (complete === 'complete') {\n      return (<CheckIcon fontSize=\"small\" sx={{ fontSize: 16, color: \"#43d043\" }} />)\n    }\n    if (complete === 'failed') {\n      return (<ErrorOutlineIcon color=\"error\" fontSize=\"small\" sx={{ fontSize: 16 }} />)\n    }\n    return (<RotateRightIcon fontSize=\"small\" sx={{ fontSize: 16 }} />)\n  }\n  return (<RadioButtonUncheckedIcon fontSize=\"small\" sx={{ fontSize: 16 }} />)\n}\n\nfunction Status(checksFailed, flowRunning, complete, value) {\n  if (flowRunning || checksFailed) {\n    if (complete === 'complete') {\n      return (<Typography variant=\"body2\" align=\"left\" fontSize=\"small\" sx={{ fontSize: 14, color: \"#43d043\" }}>{value}</Typography>)\n    }\n    if (complete === 'failed') {\n      return (<Typography variant=\"body2\" align=\"left\" color=\"red\" fontSize=\"small\" sx={{ fontSize: 14 }}>{value}</Typography>)\n    }\n    return (<MoreHorizIcon fontSize=\"small\" sx={{ fontSize: 16 }} />)\n  }\n  return (<RadioButtonUncheckedIcon fontSize=\"small\" sx={{ fontSize: 16 }} />)\n}\n\nfunction setCheck(check, set_prop_fn) {\n  if (check != null) {\n    if (check === true) {\n      set_prop_fn('complete');\n    } else {\n      set_prop_fn('failed');\n    }\n  }\n}\nconst Setup = (props) => {\n\n  return (\n    <React.Fragment>\n      <Paper sx={{ p: 2, display: 'flex', mb: 0.5, mt: 2, flexDirection: 'column', background: \"transparent\", borderRadius: 2, border: 1, borderColor: \"#ffffff44\", boxShadow: '0' }}>\n        <Typography variant=\"h5\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 3, mb: 1 }}>\n          Train Health Checks\n        </Typography>\n        <Typography variant=\"body2\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 1, mb: 1 }}>\n          Ensures that your environment and internet connection are ready for collaborative training.\n        </Typography>\n        <Box sx={{ width: '100%' }}>\n          <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\n            <Grid item xs={4}>\n              <Grid container direction=\"row\" alignItems=\"center\">\n                {CheckButton(props.checksFailed, props.flowRunning, props.completeLinux)}\n                <Item>Linux</Item>\n              </Grid>\n            </Grid>\n            <Grid item xs={4}>\n              <Grid container direction=\"row\" alignItems=\"center\">\n                {CheckButton(props.checksFailed, props.flowRunning, props.completeCUDA)}\n                <Item>CUDA Available</Item>\n              </Grid>\n            </Grid>\n            <Grid item xs={4}>\n              <Grid container direction=\"row\" alignItems=\"center\">\n                {CheckButton(props.checksFailed, props.flowRunning, props.completePython)}\n                <Item>Install Requirements</Item>\n              </Grid>\n            </Grid>\n            <Grid item xs={4}>\n              <Grid container direction=\"row\" alignItems=\"center\">\n                {Status(props.checksFailed, props.flowRunning, props.completeMemory, props.memory)}\n                <Item>Available CUDA Memory</Item>\n              </Grid>\n            </Grid>\n            <Grid item xs={4}>\n              <Grid container direction=\"row\" alignItems=\"center\">\n                {Status(props.checksFailed, props.flowRunning, props.completeInternet, props.bandwidth)}\n                <Item>Internet Bandwidth</Item>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Box>\n        {\n          props.warningMessage.split('\\n').map(warning => (<Typography variant=\"body2\" align=\"left\" color=\"error\" component=\"p\" sx={{ letterSpacing: 1, mt: 1 }}>{warning}</Typography>))\n        }\n      </Paper>\n    </React.Fragment>\n  );\n}\n\n\nfunction validLink(text) {\n  var pieces = text.split('?');\n\n  if (pieces.length !== 3) {\n    return false;\n  }\n  var [peers, config] = [pieces[1], pieces[2]];\n\n  function checkString(string, query) {\n    return (string.search(query) === 0);\n  }\n  if (checkString(config, \"config=\")) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction parseLink(text) {\n  var pieces = text.split('?');\n  var config = pieces[2];\n  var config = config.replace('config=', '');\n  var config = JSON.parse(config);\n  return config\n}\n\nfunction Config(props) {\n  var onTextChange = (e) => {\n    if (validLink(e.target.value)) {\n      props.setInviteText(e.target.value);\n      if (props.presetConfig) {\n        return;\n      }\n      var config = parseLink(e.target.value);\n      props.setPowerSGD(config.powerSGD);\n      props.setBatchSize(config.batchSize);\n      props.setOptimizeMemory(config.optimizeMemory);\n      props.setOptimizeCommunication(config.optimizeCommunication);\n      props.setPresetConfig(true);\n    } else {\n      props.setPresetConfig(false);\n    }\n\n  }\n\n  return (\n    <React.Fragment>\n      <Paper sx={{ p: 2, display: 'flex', mb: 0.5, mt: 2, flexDirection: 'column', background: \"transparent\", borderRadius: 2, border: 1, borderColor: \"#ffffff44\", boxShadow: '0' }}>\n        <Typography variant=\"h5\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 3 }}>\n          CONFIGURE\n        </Typography>\n        <Typography variant=\"body2\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 1, mb: 2 }}>\n          Configure your collaborative training run. We will configure the Lightning Trainer for you!\n        </Typography>\n        <TextField\n          id=\"outlined-textarea\"\n          label=\"Joining a collaborative training run? Paste your invite here.\"\n          placeholder=\"collaborative-...\"\n          onChange={onTextChange}\n          sx={{ mb: 2 }}\n        />\n        {props.presetConfig && <Typography variant=\"body2\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 1, mb: 2 }}>\n          Joining a Collaborative Training run, we'll select the configuration for you.\n        </Typography>\n        }\n        <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\n          <Grid item xs={6}>\n            <LightTooltip title=\"All machines connected will accumulate to this batch size before performing a global update step.\" followCursor>\n              <Box>\n                <Typography variant=\"subtitle1\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 1 }}>\n                  Collaborative Batch Size\n                </Typography>\n              </Box>\n            </LightTooltip>\n            {DiscreteBatchSizeSlider(props)}\n          </Grid>\n          <Grid item xs={6}>\n            <Typography variant=\"subtitle1\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 1 }}>\n              GPUs\n            </Typography>\n            {DeviceSlider(props)}\n          </Grid>\n        </Grid>\n        {Options(props)}\n      </Paper>\n    </React.Fragment>\n  );\n}\nfunction StartTrain(props) {\n\n  var trainClick = (event) => {\n    if (!props.startInstallState) {\n      let state = structuredClone(props.lightningState);\n      state.flows.train_flow.vars.start_setup = true;\n      state.flows.train_flow.vars.invite_link = props.inviteText;\n      state.flows.train_flow.vars.power_sgd = props.powerSGD;\n      state.flows.train_flow.vars.devices = props.deviceState;\n      state.flows.train_flow.vars.optimize_communication = props.optimizeCommunication;\n      state.flows.train_flow.vars.optimize_memory = props.optimizeMemory;\n      state.flows.train_flow.vars.batch_size = props.batchSize;\n      props.updateLightningState(state);\n      props.setStartInstallState(true);\n      props.setFlowRunning(true);\n      props.setChecksFailed(false);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Paper sx={{ p: 2, display: 'flex', mb: 0.5, mt: 2, flexDirection: 'column', background: \"transparent\", borderRadius: 2, border: 1, borderColor: \"#ffffff44\", boxShadow: '0' }}>\n        <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\n          <Grid item xs={6}>\n            <Typography variant=\"h5\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 3 }}>\n              TRAIN\n            </Typography>\n            <Typography variant=\"body2\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 1 }}>\n              Start training on your machine.\n            </Typography>\n          </Grid>\n          <Grid item xs={6} align=\"center\">\n            <ColorLoadingButton sx={{ mb: 1, mt: 1, width: '75%', '& .MuiLoadingButton-loadingIndicator': { color: '#48e38e', }, }} onClick={trainClick} loading={props.startInstallState} disabled={props.enableTrainState || props.startInstallState} variant=\"contained\" loadingPosition=\"start\">{props.enableTrainState ? \"TRAINING\" : (props.flowRunning ? \"Running Health Checks\" : \"START TRAINING\")}</ColorLoadingButton>\n          </Grid>\n        </Grid>\n      </Paper>\n    </React.Fragment>\n  );\n}\nfunction StopTrain(props) {\n  return (\n    <React.Fragment>\n      <Paper sx={{ p: 2, display: 'flex', mb: 0.5, mt: 2, flexDirection: 'column', background: \"transparent\", borderRadius: 2, border: 1, borderColor: \"#ffffff44\", boxShadow: '0' }}>\n        <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\n          <Grid item xs={6}>\n            <Typography variant=\"h5\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 3 }}>\n              TRAIN\n            </Typography>\n            <Typography variant=\"body2\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 1 }}>\n              Training has started. Logs should appear on the left soon.\n            </Typography>\n          </Grid>\n        </Grid>\n        <Typography variant=\"body2\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 1 }}>\n          You can see your local stored metrics in the MONITOR tab.\n        </Typography>\n        <Typography variant=\"body2\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 1 }}>\n          To stop training, stop the app.\n        </Typography>\n      </Paper>\n      <Paper sx={{ p: 2, display: 'flex', mb: 0.5, mt: 2, flexDirection: 'column', background: \"transparent\", borderRadius: 2, border: 1, borderColor: \"#ffffff44\", boxShadow: '0' }}>\n        <Typography variant=\"h5\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 3 }}>\n          INVITE\n        </Typography>\n        <Typography variant=\"body2\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ letterSpacing: 1, mb: 1 }}>\n          Send this link to others to join your training run.\n        </Typography>\n        <Card sx={{ borderRadius: 2 }}>\n          <CardContentNoPadding>\n            <Box sx={{ overflowY: 'scroll', width: '100%', pb: 0, backgroundColor: '#282a36' }}>\n              <CopyBlock\n                text={props.shareInviteLink}\n                language={\"bash\"}\n                showLineNumbers={false}\n                wrapLines\n                theme={dracula}\n                customStyle={{ paddingLeft: 20 }}\n              />\n            </Box>\n          </CardContentNoPadding>\n        </Card>\n      </Paper>\n    </React.Fragment>\n  );\n}\nexport default function Train(props) {\n  const [stateReceived, setStateReceived] = React.useState(false)\n  const [startInstallState, setStartInstallState] = React.useState(false)\n  const [enableTrainState, setEnableTrainState] = React.useState(false)\n  const [warningMessage, setWarningMessage] = React.useState('')\n  const [startTraining, setStartTraining] = React.useState(false)\n  const [flowRunning, setFlowRunning] = React.useState(false)\n  const [checksFailed, setChecksFailed] = React.useState(false)\n  const [inviteText, setInviteText] = React.useState('')\n  const [shareInviteLink, setShareInviteLink] = React.useState('')\n  const [deviceState, setDeviceState] = React.useState(8)\n  const [devices, setDevices] = React.useState(8)\n  const [batchSize, setBatchSize] = React.useState(1024)\n  const [powerSGD, setPowerSGD] = React.useState(false)\n  const [optimizeCommunication, setOptimizeCommunication] = React.useState(false)\n  const [optimizeMemory, setOptimizeMemory] = React.useState(false)\n\n\n  const [presetConfig, setPresetConfig] = React.useState(false)\n\n  const [completeLinux, setCompleteLinux] = React.useState('wait')\n  const [completeCUDA, setCompleteCUDA] = React.useState('wait')\n  const [completeInternet, setCompleteInternet] = React.useState('wait')\n  const [completePython, setCompletePython] = React.useState('wait')\n  const [completeMemory, setCompleteMemory] = React.useState('wait')\n\n  const [memory, setMemory] = React.useState('')\n  const [bandwidth, setBandwidth] = React.useState('')\n\n\n  let logState = props.logState;\n  let setLogState = props.setLogState;\n  let lightningState = props.lightningState;\n  let updateLightningState = props.updateLightningState;\n\n  React.useEffect(() => {\n    if (lightningState) {\n      setStateReceived(true);\n      if (lightningState.flows.train_flow.vars.flow_running) {\n          setStartInstallState(true);\n          setFlowRunning(true);\n          setChecksFailed(false);\n      }\n      let checks = lightningState.flows.train_flow.works.work_0?.vars;\n      if (checks) {\n        setCheck(checks.cuda, setCompleteCUDA)\n        setCheck(checks.linux, setCompleteLinux)\n        setCheck(checks.python, setCompletePython)\n        setCheck(checks.internet, setCompleteInternet)\n        setCheck(checks.memory, setCompleteMemory)\n        if (checks.bandwidth !== null) {\n          setBandwidth(checks.bandwidth)\n        }\n        if (checks.current_memory !== null) {\n          setMemory(checks.current_memory)\n        }\n        if (checks.warning !== null) {\n          setWarningMessage(checks.warning)\n        }\n        if (checks.discovered_devices !== null) {\n          setDevices(checks.discovered_devices)\n        }\n        if ((checks.success != null) && (checks.success != true)) {\n          setStartInstallState(false);\n          setFlowRunning(false);\n          setChecksFailed(true);\n        }\n      }\n      if (lightningState.flows.train_flow.works.work_0?.vars.training_started) {\n        var logs = lightningState.flows.train_flow.vars.logs;\n        setLogState(logs);\n        setStartTraining(true);\n        setEnableTrainState(true);\n        setFlowRunning(true);\n      }\n      if (lightningState.flows.train_flow.vars.share_link) {\n        var shareInviteLink = lightningState.flows.train_flow.vars.share_link;\n        setShareInviteLink(shareInviteLink);\n      }\n    }\n  }, [lightningState]);\n\n  React.useEffect(() => {\n    if (lightningState) {\n      let discovered_devices = lightningState.flows.train_flow.vars.discovered_devices;\n      if (discovered_devices) {\n        setDevices(discovered_devices);\n      }\n    }\n  }, [lightningState]);\n\n  return (\n    <React.Fragment>\n      <Container disableGutters sx={{ display: 'flex', flexDirection: 'column', width: '50%' }}>\n        <Typography variant=\"h2\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ ml: 1, letterSpacing: 3 }}>\n          Collaborative Training\n        </Typography>\n        <Typography variant=\"body1\" align=\"left\" color=\"text.secondary\" component=\"p\" sx={{ ml: 1, letterSpacing: 1 }}>\n          Train a language model collaboratively, using Hivemind and PyTorch Lightning.\n        </Typography>\n        <Link rel=\"noopener noreferrer\" target=\"_blank\" sx={{ ml: 1, letterSpacing: 1 }} href=\"https://github.com/PyTorchLightning/lightning-collaborative#troubleshooting\">Troubleshooting Guide</Link>\n        {startTraining && stateReceived ? StopTrain({ lightningState, updateLightningState, shareInviteLink, setShareInviteLink, setPresetConfig, enableTrainState, startTraining, setStartTraining, logState, setLogState }) : null}\n        {!startTraining && stateReceived ? Config({ flowRunning, lightningState, updateLightningState, shareInviteLink, setShareInviteLink, enableTrainState, inviteText, setInviteText, devices, setDevices, deviceState, setDeviceState, powerSGD, setPowerSGD, setPresetConfig, presetConfig, optimizeCommunication, setOptimizeCommunication, optimizeMemory, setOptimizeMemory, batchSize, setBatchSize }) : null}\n        {!startTraining && stateReceived ? StartTrain({ setChecksFailed, flowRunning, setFlowRunning, startInstallState, setStartInstallState, enableTrainState, setEnableTrainState, lightningState, updateLightningState, shareInviteLink, setShareInviteLink, enableTrainState, inviteText, devices, setDevices, deviceState, powerSGD, optimizeCommunication, optimizeMemory, batchSize, startTraining, setStartTraining, logState, setLogState }) : null}\n        {Setup({ checksFailed, flowRunning, lightningState, updateLightningState, shareInviteLink, setShareInviteLink, devices, setDevices, memory, setMemory, bandwidth, setBandwidth, completeLinux, setCompleteLinux, completeCUDA, setCompleteCUDA, completeInternet, setCompleteInternet, completePython, setCompletePython, completeMemory, setCompleteMemory, startInstallState, setStartInstallState, enableTrainState, setEnableTrainState, warningMessage, setWarningMessage })}\n      </Container>\n    </React.Fragment>\n  );\n}\n","__webpack_require__.h = () => (\"434650fe664ed892a240\")"],"names":[],"sourceRoot":""}
